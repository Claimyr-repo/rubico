/**
 * rubico v1.6.3
 * https://github.com/a-synchronous/rubico
 * (c) 2019-2020 Richard Tong
 * rubico may be freely distributed under the MIT license.
 */
const isPromise=e=>null!=e&&"function"==typeof e.then,objectAssign=Object.assign,__=Symbol.for("placeholder"),curry2ResolveArg0=(e,r)=>function(n){return e(n,r)},curry2ResolveArg1=(e,r)=>function(n){return e(r,n)},curry2=function(e,r,n){return r==__?curry2ResolveArg0(e,n):curry2ResolveArg1(e,r)},promiseObjectAllExecutor=e=>function(r){const n={};let o=0;for(const t in e){const c=e[t];isPromise(c)?(o+=1,c.then((e=>function(t){n[e]=t,o-=1,0==o&&r(n)})(t))):n[t]=c}0==o&&r(n)},promiseObjectAll=e=>new Promise(promiseObjectAllExecutor(e)),funcObjectAll=e=>function(...r){const n={};let o=!1;for(const t in e){const c=e[t](...r);!o&&isPromise(c)&&(o=!0),n[t]=c}return o?new Promise(promiseObjectAllExecutor(n)):n},assign=function(e){const r=funcObjectAll(e);return function(e){const n=r(e);return isPromise(n)?n.then((o=objectAssign,c=__,(t=e)==__?curry2ResolveArg0(o,c):curry2ResolveArg1(o,t))):{...e,...n};var o,t,c}};export default assign;
