/**
 * rubico v1.6.6
 * https://github.com/a-synchronous/rubico
 * (c) 2019-2020 Richard Tong
 * rubico may be freely distributed under the MIT license.
 */
const isArray=Array.isArray,isPromise=r=>null!=r&&"function"==typeof r.then,promiseAll=Promise.all.bind(Promise),funcAll=r=>function(...e){const n=r.length,o=Array(n);let c=-1,t=!1;for(;++c<n;){const n=r[c](...e);isPromise(n)&&(t=!0),o[c]=n}return t?promiseAll(o):o},promiseObjectAllExecutor=r=>function(e){const n={};let o=0;for(const c in r){const t=r[c];isPromise(t)?(o+=1,t.then((r=>function(c){n[r]=c,o-=1,0==o&&e(n)})(c))):n[c]=t}0==o&&e(n)},promiseObjectAll=r=>new Promise(promiseObjectAllExecutor(r)),funcObjectAll=r=>function(...e){const n={};let o=!1;for(const c in r){const t=r[c](...e);!o&&isPromise(t)&&(o=!0),n[c]=t}return o?new Promise(promiseObjectAllExecutor(n)):n},funcConcat=(r,e)=>function(...n){const o=r(...n);return isPromise(o)?o.then(e):e(o)},__=Symbol.for("placeholder"),curry3ResolveArg0=(r,e,n)=>function(o){return r(o,e,n)},curry3ResolveArg1=(r,e,n)=>function(o){return r(e,o,n)},curry3ResolveArg2=(r,e,n)=>function(o){return r(e,n,o)},curry3=function(r,e,n,o){return e==__?curry3ResolveArg0(r,n,o):n==__?curry3ResolveArg1(r,e,o):curry3ResolveArg2(r,e,n)},curry4ResolveArg0=(r,e,n,o)=>function(c){return r(c,e,n,o)},curry4ResolveArg1=(r,e,n,o)=>function(c){return r(e,c,n,o)},curry4ResolveArg2=(r,e,n,o)=>function(c){return r(e,n,c,o)},curry4ResolveArg3=(r,e,n,o)=>function(c){return r(e,n,o,c)},curry4=function(r,e,n,o,c){return e==__?curry4ResolveArg0(r,n,o,c):n==__?curry4ResolveArg1(r,e,o,c):o==__?curry4ResolveArg2(r,e,n,c):curry4ResolveArg3(r,e,n,o)},objectSet=function(r,e,n){return r[e]=n,r},asyncFuncAllSeries=async function(r,e,n,o){const c=r.length;for(;++o<c;){const c=r[o](...e);n[o]=isPromise(c)?await c:c}return n},funcAllSeries=r=>function(...e){const n=r.length,o=[];let c=-1;for(;++c<n;){const n=r[c](...e);if(isPromise(n))return n.then(funcConcat((t=objectSet,s=c,l=__,(u=o)==__?curry3ResolveArg0(t,s,l):s==__?curry3ResolveArg1(t,u,l):curry3ResolveArg2(t,u,s)),curry4(asyncFuncAllSeries,r,e,__,c)));o[c]=n}var t,u,s,l;return o},fork=r=>isArray(r)?funcAll(r):funcObjectAll(r);fork.series=r=>isArray(r)?funcAllSeries(r):funcObjectAll(r);export default fork;
