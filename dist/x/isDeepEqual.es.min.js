/**
 * rubico v1.6.3
 * https://github.com/a-synchronous/rubico
 * (c) 2019-2020 Richard Tong
 * rubico may be freely distributed under the MIT license.
 */
const isArray=Array.isArray,objectKeysLength=e=>{let t=0;for(const r in e)t+=1;return t},symbolIterator=Symbol.iterator,areIteratorsDeepEqual=function(e,t){let r=e.next(),n=t.next();if(r.done!=n.done)return!1;for(;!r.done;){if(!isDeepEqual(r.value,n.value))return!1;r=e.next(),n=t.next()}return n.done},areObjectsDeepEqual=function(e,t){if(objectKeysLength(e)!=objectKeysLength(t))return!1;for(const r in e)if(!isDeepEqual(e[r],t[r]))return!1;return!0},areArraysDeepEqual=function(e,t){const r=e.length;if(t.length!=r)return!1;let n=-1;for(;++n<r;)if(!isDeepEqual(e[n],t[n]))return!1;return!0},isDeepEqual=function(e,t){return isArray(e)&&isArray(t)?areArraysDeepEqual(e,t):"object"==typeof e&&"object"==typeof t&&null!=e&&null!=t&&e.constructor==t.constructor&&"function"==typeof e[symbolIterator]&&"function"==typeof t[symbolIterator]?areIteratorsDeepEqual(e[symbolIterator](),t[symbolIterator]()):null==e||null==t?e===t:e.constructor==Object&&t.constructor==Object?areObjectsDeepEqual(e,t):e===t};export default isDeepEqual;
